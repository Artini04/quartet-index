@use "sass:string";

@mixin use-flex($direction: row, $wrap: wrap, $gap: 0) {
  & {
    display: flex;
    flex-flow: $direction $wrap;
    gap: $gap;
  }
}

@mixin use-align($inline: flex-start, $block: flex-start) {
  & {
    align-items: $inline;
    justify-content: $block;
  }
}

@mixin with-icon($space: 0.4em, $bottom: -0.15em) {
  & .iconify {
    margin-bottom: $bottom;
  }

  & > * + * {
    margin-left: $space;
  }
}

// NEW
@mixin use-hover($hold: false) {
  @media (hover: hover) {
    &:is(:hover) {
      @content;
    }
  }

  @if $hold {
    @media (hover: none) {
      @content;
    }
  }
}

@mixin use-break($break: 1000px) {
  @container (width <= #{$break}) {
    @content;
  }
}

@mixin use-transition($property, $duration: 200ms, $easing-function: ease) {
  & {
    transition-property: string.unquote($property);
    transition-duration: $duration;
    transition-timing-function: $easing-function;

    @content;
  }
}
